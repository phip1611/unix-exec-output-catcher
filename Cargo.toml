[package]
name = "unix-exec-output-catcher"
description = "Library to run executables in a child process and catch STDOUT and STDERR output on UNIX-systems. std::process::Command is probably the better option. Use this source code as educational source how it could be done."
version = "0.2.3"
authors = ["Philipp Schuster <phip1611@gmail.com>"]
edition = "2018"
keywords = ["unix", "pipe", "fork", "exec", "posix"]
categories = [ "os::unix-apis", "command-line-interface" ]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/phip1611/unix-exec-output-catcher"
repository = "https://github.com/phip1611/unix-exec-output-catcher"
documentation = "https://docs.rs/unix-exec-output-catcher/"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
libc = "0.2.82"
errno = "0.2.7"
derive_more = "0.99.11"
log = "0.4.11"

# for examples
[dev-dependencies]
env_logger = "0.8.2"
log = "0.4.11"